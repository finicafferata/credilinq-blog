#!/usr/bin/env python3

import sys
import traceback

def test_workflow_import():
    """Test importing the workflow module to find the issue"""
    
    print("üß™ Testing workflow module import...")
    
    try:
        # Add the project root to sys.path
        sys.path.insert(0, '.')
        
        print("üìù Step 1: Basic imports...")
        from fastapi import APIRouter, HTTPException
        from pydantic import BaseModel
        from typing import Dict, Any, Optional, List
        import uuid
        import datetime
        import logging
        from enum import Enum
        print("   ‚úÖ Basic imports successful")
        
        print("üìù Step 2: Importing workflow module...")
        from src.api.routes import workflow
        print("   ‚úÖ Workflow module imported successfully")
        
        print("üìù Step 3: Checking workflow classes...")
        print(f"   WorkflowStep: {workflow.WorkflowStep}")
        print(f"   WorkflowStatus: {workflow.WorkflowStatus}")
        print(f"   WorkflowState: {workflow.WorkflowState}")
        print("   ‚úÖ Workflow classes accessible")
        
        print("üìù Step 4: Testing WorkflowState creation...")
        test_state = workflow.WorkflowState(
            workflow_id="test-123",
            current_step=workflow.WorkflowStep.PLANNER,
            progress=0,
            status=workflow.WorkflowStatus.PENDING,
            blog_title="Test Blog",
            company_context="Test Company",
            content_type="blog",
            mode="advanced",
            created_at=datetime.datetime.now(),
            updated_at=datetime.datetime.now()
        )
        print("   ‚úÖ WorkflowState creation successful")
        
        print("üìù Step 5: Testing workflow_state_to_dict function...")
        result_dict = workflow.workflow_state_to_dict(test_state)
        print(f"   ‚úÖ Dict conversion successful: {type(result_dict)}")
        
        print("üìù Step 6: Testing auto_execute_workflow function exists...")
        print(f"   auto_execute_workflow: {workflow.auto_execute_workflow}")
        print(f"   Type: {type(workflow.auto_execute_workflow)}")
        print("   ‚úÖ Function exists and is callable")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import test failed: {e}")
        print(f"üìÑ Full traceback:")
        traceback.print_exc()
        return False

def test_workflow_functions():
    """Test individual workflow functions"""
    
    print("\nüß™ Testing workflow functions...")
    
    try:
        sys.path.insert(0, '.')
        from src.api.routes import workflow
        import datetime
        
        # Create a test workflow state
        test_state = workflow.WorkflowState(
            workflow_id="test-456",
            current_step=workflow.WorkflowStep.PLANNER,
            progress=0,
            status=workflow.WorkflowStatus.PENDING,
            blog_title="Function Test Blog",
            company_context="Function Test Company",
            content_type="blog",
            mode="advanced",
            created_at=datetime.datetime.now(),
            updated_at=datetime.datetime.now()
        )
        
        print("üìù Testing individual step functions...")
        
        # Test execute_planner_logic
        print("   Testing execute_planner_logic...")
        # Note: This is async, so we'd need asyncio to test it properly
        planner_func = workflow.execute_planner_logic
        print(f"   execute_planner_logic type: {type(planner_func)}")
        print("   ‚úÖ Planner function accessible")
        
        # Test workflow_state_to_dict
        print("   Testing workflow_state_to_dict...")
        dict_result = workflow.workflow_state_to_dict(test_state)
        print(f"   Result type: {type(dict_result)}")
        print(f"   Keys: {list(dict_result.keys())}")
        print("   ‚úÖ Dict conversion successful")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Function test failed: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîç Debugging workflow module import and function issues")
    print("="*60)
    
    import_success = test_workflow_import()
    
    if import_success:
        function_success = test_workflow_functions()
        
        print("\n" + "="*60)
        print("üìä TEST RESULTS:")
        print(f"   Import test: {'‚úÖ SUCCESS' if import_success else '‚ùå FAILED'}")
        print(f"   Function test: {'‚úÖ SUCCESS' if function_success else '‚ùå FAILED'}")
        
        if import_success and function_success:
            print("\nüí° Module imports and functions work correctly!")
            print("   The error is likely in the FastAPI endpoint execution,")
            print("   not in the module itself.")
        else:
            print("\n‚ö†Ô∏è Found issues with the module.")
            
    else:
        print("\n‚ùå Cannot import workflow module - this is the root cause!")