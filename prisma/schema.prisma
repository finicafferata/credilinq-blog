generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DATABASE_URL_DIRECT")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model BlogPost {
  id              String     @id @default(uuid()) @db.Uuid
  title           String
  contentMarkdown String
  initialPrompt   Json?
  status          PostStatus @default(draft)
  geoMetadata     Json?
  geoOptimized    Boolean    @default(false)
  geoScore        Int?
  createdAt       DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime   @updatedAt @db.Timestamptz(6)
  campaignId      String?    @unique @db.Uuid
  campaign        Campaign?
}

model Campaign {
  id              String           @id @default(uuid()) @db.Uuid
  createdAt       DateTime         @default(now())
  blogPostId      String?          @unique @db.Uuid
  briefing        Briefing?
  blogPost        BlogPost?        @relation(fields: [blogPostId], references: [id])
  tasks           CampaignTask[]
  contentStrategy ContentStrategy?
}

model Briefing {
  id                 String    @id @default(uuid()) @db.Uuid
  campaignName       String
  marketingObjective String
  targetAudience     String
  channels           Json
  desiredTone        String
  language           String
  companyContext     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  campaignId         String?   @unique @db.Uuid
  campaign           Campaign? @relation(fields: [campaignId], references: [id])
}

model ContentStrategy {
  id                String    @id @default(uuid()) @db.Uuid
  campaignName      String
  narrativeApproach String
  hooks             Json
  themes            Json
  toneByChannel     Json
  keyPhrases        Json
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  campaignId        String?   @unique @db.Uuid
  campaign          Campaign? @relation(fields: [campaignId], references: [id])
}

model CampaignTask {
  id           String   @id @default(uuid()) @db.Uuid
  campaignId   String   @db.Uuid
  taskType     String
  targetFormat String?
  targetAsset  String?
  status       String
  result       String?
  imageUrl     String?
  error        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  campaign     Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model Document {
  id             String          @id @default(uuid()) @db.Uuid
  title          String
  storagePath    String
  uploadedAt     DateTime?       @default(now()) @db.Timestamptz(6)
  documentChunks DocumentChunk[]
}

model DocumentChunk {
  id         BigInt    @id @default(autoincrement())
  content    String
  embedding  String?
  documentId String?   @db.Uuid
  document   Document? @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum PostStatus {
  draft
  published
  archived
  deleted
  edited
}

enum TaskStatus {
  pending
  in_progress
  needs_review
  approved
  rejected
  completed
  error
}
